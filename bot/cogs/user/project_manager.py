from nextcord.ext.commands import Cog, Bot, command, Context
from nextcord import Embed, Color, Member
from datetime import datetime
import logging
import os
import nextcord

from bot.database import Database
from bot.misc.embeds.projects import ProjectEmbeds
from bot.misc.embeds.media import MediaEmbeds
from bot.misc.embeds.portfolio import PortfolioEmbeds
from bot.misc.media_utils import MediaUtils

logger = logging.getLogger(__name__)


class __ProjectManager(Cog):
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self.media_utils = MediaUtils()

    @command(name="add-project")
    async def add_project(self, ctx: Context, name: str = None, category: str = None, *, description: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        if any(arg is None for arg in [name, category, description]):
            embed = ProjectEmbeds.add_project_missing_args()
            await ctx.send(embed=embed)
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            existing_projects = self.db.get_user_projects(ctx.author.id)
            if len(existing_projects) >= 3:
                embed = ProjectEmbeds.project_limit_reached()
                await ctx.send(embed=embed)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            existing_project = self.db.get_project_by_name(ctx.author.id, name)
            if existing_project:
                embed = ProjectEmbeds.project_exists(name)
                await ctx.send(embed=embed)
                return

            project = self.db.create_project(
                discord_id=ctx.author.id,
                name=name,
                category=category,
                description=description
            )

            remaining = 3 - len(existing_projects) - 1
            embed = ProjectEmbeds.project_added_success(name, category, description, remaining)
            await ctx.send(embed=embed)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
            embed = ProjectEmbeds.generic_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await ctx.send(embed=embed)

    @command(name="add-media")
    async def add_media(self, ctx: Context, project_name: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ –ø—Ä–æ–µ–∫—Ç—É"""
        if project_name is None:
            embed = MediaEmbeds.add_media_missing_args()
            await ctx.send(embed=embed)
            return

        try:
            project = self.db.get_project_by_name(ctx.author.id, project_name)

            if not project:
                embed = ProjectEmbeds.project_exists(project_name)  
                await ctx.send(embed=embed)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not ctx.message.attachments:
                embed = MediaEmbeds.no_attachments()
                await ctx.send(embed=embed)
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ
            added_media = []
            errors = []

            for attachment in ctx.message.attachments:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                    media_type = MediaUtils.get_media_type(attachment.content_type)
                    if not media_type:
                        errors.append(f"‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {attachment.filename}")
                        continue

                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    filepath = await self.media_utils.download_media(attachment.url, project.id)
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    media = self.db.add_media(project.id, filepath, media_type)
                    if media:
                        added_media.append(f"‚Ä¢ {attachment.filename}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {attachment.filename}: {str(e)}")
                    errors.append(f"‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {attachment.filename}")

            embed = MediaEmbeds.media_add_result(project_name, added_media, errors)
            await ctx.send(embed=embed)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {str(e)}")
            embed = ProjectEmbeds.generic_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await ctx.send(embed=embed)

    @command(name="preview")
    async def preview_portfolio(self, ctx: Context, member: Member = None):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            target = member or ctx.author
            projects = self.db.get_user_projects(target.id)
            embed = PortfolioEmbeds.portfolio_preview(target, bool(projects))
            await ctx.send(embed=embed)
            if projects:
                for project in projects:
                    project_embed = PortfolioEmbeds.project_details(project)
                    await ctx.send(embed=project_embed)
                    media = self.db.get_project_media(project.id)
                    if media:
                        for m in media:
                            try:
                                if os.path.exists(m.url):
                                    await ctx.send(file=nextcord.File(m.url))
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {m.url}: {str(e)}")
                    else:
                        await ctx.send("üìé –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}")
            embed = ProjectEmbeds.generic_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await ctx.send(embed=embed)

    @command(name="remove-media")
    async def remove_media(self, ctx: Context, project_name: str = None):
        """–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
        if project_name is None:
            embed = MediaEmbeds.no_media_in_project(project_name or "<–Ω–µ —É–∫–∞–∑–∞–Ω–æ>")
            await ctx.send(embed=embed)
            return

        try:
            project = self.db.get_project_by_name(ctx.author.id, project_name)

            if not project:
                embed = ProjectEmbeds.project_exists(project_name)
                await ctx.send(embed=embed)
                return

            media = self.db.get_project_media(project.id)
            if not media:
                embed = MediaEmbeds.no_media_in_project(project_name)
                await ctx.send(embed=embed)
                return

            embed = MediaEmbeds.media_list(project_name, media)
            await ctx.send(embed=embed)

            def check(m):
                return m.author == ctx.author and m.channel == ctx.channel and m.content.isdigit()

            try:
                msg = await self.bot.wait_for('message', check=check, timeout=30.0)
                index = int(msg.content) - 1
                if 0 <= index < len(media):
                    file_to_remove = media[index]
                    if os.path.exists(file_to_remove.url):
                        os.remove(file_to_remove.url)
                    with self.db.get_session() as session:
                        session.delete(file_to_remove)
                        session.commit()
                    embed = MediaEmbeds.media_removed(project_name)
                else:
                    embed = ProjectEmbeds.generic_error("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.")
            except TimeoutError:
                embed = ProjectEmbeds.generic_error("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await ctx.send(embed=embed)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {str(e)}")
            embed = ProjectEmbeds.generic_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await ctx.send(embed=embed)


def register_user_cogs(bot: Bot) -> None:
    bot.add_cog(__ProjectManager(bot)) 