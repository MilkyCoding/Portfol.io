from nextcord import Embed, Color, Member
from typing import List, Optional, Dict, Any
from dataclasses import dataclass
from bot.database.models import Link

@dataclass
class CommandInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"""
    name: str
    description: str
    example: Optional[str] = None

class ProfileEmbeds:
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    SUCCESS_COLOR = Color.green()
    INFO_COLOR = Color.blue()
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
    COMMANDS: Dict[str, List[CommandInfo]] = {
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å": [
            CommandInfo("set-profile", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º"),
            CommandInfo("set-links", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏", "GitHub: github.com/username, Behance: behance.net/username"),
            CommandInfo("profile", "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        ],
        "üìÅ –ü—Ä–æ–µ–∫—Ç—ã": [
            CommandInfo("add-project", "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "–í–µ–±-—Å–∞–π—Ç –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"),
            CommandInfo("preview", "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        ],
        "üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã": [
            CommandInfo("add-media", "–¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"),
            CommandInfo("remove-media", "—É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã")
        ]
    }

    @staticmethod
    def _format_links(links: List[Link]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return "\n".join(f"‚Ä¢ [{link.title or '–°—Å—ã–ª–∫–∞'}]({link.url})" for link in links)

    @staticmethod
    def _format_command_list(commands: List[CommandInfo]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return "\n".join(f"‚Ä¢ `/{cmd.name} {cmd.example or ''}` - {cmd.description}" for cmd in commands)

    @classmethod
    def profile_view(cls, member: Member, bio: str, links: List[Link], is_own_profile: bool) -> Embed:
        """–°–æ–∑–¥–∞–µ—Ç –µ–º–±–µ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        embed = Embed(
            title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {member.display_name}",
            description=bio or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
            color=cls.INFO_COLOR
        )

        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)

        if links:
            embed.add_field(
                name="üîó –°—Å—ã–ª–∫–∏",
                value=cls._format_links(links),
                inline=False
            )

        preview_cmd = "preview" if is_own_profile else f"preview @{member.name}"
        embed.add_field(
            name="üìÅ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
            value=f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/{preview_cmd}` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
            inline=False
        )

        return embed

    @classmethod
    def profile_updated(cls, bio: str) -> Embed:
        """–°–æ–∑–¥–∞–µ—Ç –µ–º–±–µ–¥ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        return Embed(
            title="‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
            description="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            color=cls.SUCCESS_COLOR
        ).add_field(
            name="–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            value=bio,
            inline=False
        )

    @classmethod
    def links_updated(cls, added_links: List[str], errors: Optional[List[str]] = None) -> Embed:
        """–°–æ–∑–¥–∞–µ—Ç –µ–º–±–µ–¥ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫"""
        embed = Embed(
            title="‚úÖ –°—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫:",
            color=cls.SUCCESS_COLOR
        )

        if added_links:
            embed.add_field(
                name="–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                value="\n".join(added_links),
                inline=False
            )

        if errors:
            embed.add_field(
                name="–û—à–∏–±–∫–∏",
                value="\n".join(errors),
                inline=False
            )

        return embed

    @classmethod
    def help_command(cls) -> Embed:
        """–°–æ–∑–¥–∞–µ—Ç –µ–º–±–µ–¥ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        embed = Embed(
            title="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
            description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:",
            color=cls.INFO_COLOR
        )

        for category, commands in cls.COMMANDS.items():
            embed.add_field(
                name=category,
                value=cls._format_command_list(commands),
                inline=False
            )

        if category == "üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã":
            embed.add_field(
                name="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã",
                value="‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG, GIF)\n‚Ä¢ –í–∏–¥–µ–æ (MP4, WebM)",
                inline=False
            )

        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return embed 